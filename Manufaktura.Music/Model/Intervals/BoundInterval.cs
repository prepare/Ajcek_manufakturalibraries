using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Manufaktura.Music.Model
{
    /// <summary>
    /// Represents an interval with starting pitch (for example "a perfect fifth up from C4")
    /// </summary>
    public class BoundInterval : Interval
    {
        /// <summary>
        /// Starting pitch.
        /// </summary>
        public Pitch StartingPitch { get; protected set; }

        /// <summary>
        /// Ending pitch.
        /// </summary>
        public Pitch EndingPitch { get; protected set; }

        /// <summary>
        /// Initializes a new instance of BoundInterval that represents an interval between two pitches.
        /// </summary>
        /// <param name="pitch1"></param>
        /// <param name="pitch2"></param>
        public BoundInterval(Pitch pitch1, Pitch pitch2) : base(Pitch.StepDistance(pitch1, pitch2) + 1, pitch2.MidiPitch - pitch1.MidiPitch)
        {
            StartingPitch = pitch1;
            EndingPitch = pitch2;
        }

        /// <summary>
        /// Initializes a new instance of BoundInterval which is generated by translation of specific pitch by specific interval.
        /// </summary>
        /// <param name="pitch">Pitch to translate</param>
        /// <param name="interval">Interval</param>
        /// <param name="translationMode">Translation mode</param>
        public BoundInterval(Pitch pitch, Interval interval, Pitch.MidiPitchTranslationMode translationMode)
            : base(interval.Steps, interval.Halftones)
        {
            StartingPitch = pitch;
            EndingPitch = pitch.Translate(interval, translationMode);
        }

        public override string ToString()
        {
            return string.Format("{0}-{1} {2}", StartingPitch, EndingPitch, base.ToString());
        }
    }
}
