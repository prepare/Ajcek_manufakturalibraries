<!--https://github.com/EdCharbeneau/BlazeDown-->

@using HtmlAgilityPack;
@using Microsoft.AspNetCore.Blazor;
@using Microsoft.AspNetCore.Blazor.RenderTree;

@if (Content == null)
{
    <span>Loading...</span>
}
else
{
    @DynamicHtml
}

@functions {

[Parameter] string Content { get; set; }

RenderFragment DynamicHtml { get; set; }

protected override void OnInit()
{
    RenderHtml();
}

private void RenderHtml()
{
    DynamicHtml = null;
    DynamicHtml = builder =>
    {
        var HtmlContent = Content;
        if (HtmlContent == null) return;
        var htmlDoc = new HtmlDocument();
        htmlDoc.LoadHtml(HtmlContent);

        var htmlBody = htmlDoc.DocumentNode;
        Decend(htmlBody, builder);
    };
}


private void Decend(HtmlNode ds, RenderTreeBuilder b)
{
    foreach (var nNode in ds.ChildNodes)
    {
        if (nNode.NodeType == HtmlNodeType.Element)
        {
            b.OpenElement(0, nNode.Name);
            if (nNode.HasAttributes) Attributes(nNode, b);
            if (nNode.HasChildNodes) Decend(nNode, b);
            b.CloseElement();
        }
        else
        {
            if (nNode.NodeType == HtmlNodeType.Text)
            {
                b.AddContent(0, nNode.InnerText);
            }
        }
    }
}

private void Attributes(HtmlNode n, RenderTreeBuilder b)
{
    foreach (var a in n.Attributes)
    {
        b.AddAttribute(0, a.Name, a.Value);
    }
}

}